
@misc{noauthor_best_nodate,
	title = {Best {Practices} in {API} {Design}},
	url = {https://swagger.io/resources/articles/best-practices-in-api-design/},
	urldate = {2024-12-10},
	file = {Best Practices in API Design:C\:\\Users\\debrouwe\\Zotero\\storage\\DUI9HQBE\\best-practices-in-api-design.html:text/html},
}

@article{george_structured_2004,
	series = {Special {Issue} on {Software} {Engineering},  {Applications}, {Practices} and {Tools} from the {ACM} {Symposium} on {Applied} {Computing} 2003},
	title = {A structured experiment of test-driven development},
	volume = {46},
	issn = {0950-5849},
	url = {https://www.sciencedirect.com/science/article/pii/S0950584903002040},
	doi = {10.1016/j.infsof.2003.09.011},
	abstract = {Test Driven Development (TDD) is a software development practice in which unit test cases are incrementally written prior to code implementation. We ran a set of structured experiments with 24 professional pair programmers. One group developed a small Java program using TDD while the other (control group), used a waterfall-like approach. Experimental results, subject to external validity concerns, tend to indicate that TDD programmers produce higher quality code because they passed 18\% more functional black-box test cases. However, the TDD programmers took 16\% more time. Statistical analysis of the results showed that a moderate statistical correlation existed between time spent and the resulting quality. Lastly, the programmers in the control group often did not write the required automated test cases after completing their code. Hence it could be perceived that waterfall-like approaches do not encourage adequate testing. This intuitive observation supports the perception that TDD has the potential for increasing the level of unit testing in the software industry.},
	number = {5},
	urldate = {2024-12-10},
	journal = {Information and Software Technology},
	author = {George, Boby and Williams, Laurie},
	month = apr,
	year = {2004},
	keywords = {Agile methodologies, Extreme programming, Software engineering, Test driven development},
	pages = {337--342},
	file = {PDF:C\:\\Users\\debrouwe\\Zotero\\storage\\IGHVYT9G\\George and Williams - 2004 - A structured experiment of test-driven development.pdf:application/pdf;ScienceDirect Snapshot:C\:\\Users\\debrouwe\\Zotero\\storage\\K7EFMMBR\\S0950584903002040.html:text/html},
}

@article{kerthyayana_manuaba_combination_2019,
	title = {Combination of {Test}-{Driven} {Development} and {Behavior}-{Driven} {Development} for {Improving} {Backend} {Testing} {Performance}},
	volume = {157},
	issn = {18770509},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S1877050919310622},
	doi = {10.1016/j.procs.2019.08.144},
	abstract = {In the process of software development, a testing phase is an important step for detecting the errors. In order to produce a reliable application, this paper discusses the utilization of a combination from two different testing methods, Test- Driven Development (TDD) and Behavior Driven Development (BDD). TDD testing method is a process with a high percentage of code which is tested automatically. However, it could lead to an error when the parameters of the features are changed. Meanwhile, the BDD testing method is a testing method that could perform successfully despite changes to the parameters of the features. This paper discusses the combination of TDD and BDD testing methods, which is called as T-BDD method. By implementing T-BDD into the Vixio backend system, this paper successfully shows that it could be performed to achieve a high percentage of test-coverage while it could also adapt when the parameters of the features were changed. This paper also shows that the T-BDD testing method performed better compared to using the TDD testing method only.},
	language = {en},
	urldate = {2025-01-13},
	journal = {Procedia Computer Science},
	author = {Kerthyayana Manuaba, Ida Bagus},
	year = {2019},
	pages = {79--86},
	file = {PDF:C\:\\Users\\debrouwe\\Zotero\\storage\\2W92TPUY\\Kerthyayana Manuaba - 2019 - Combination of Test-Driven Development and Behavior-Driven Development for Improving Backend Testing.pdf:application/pdf},
}

@article{uyaguari_relevant_2024,
	title = {Relevant information in {TDD} experiment reporting},
	issn = {1049-331X},
	url = {https://dl.acm.org/doi/10.1145/3688837},
	doi = {10.1145/3688837},
	abstract = {Experiments are a commonly used method of research in software engineering (SE). Researchers report their experiments following detailed guidelines. However, researchers do not, in the field of test-driven development (TDD) at least, specify how they operationalized the response variables and, particularly, the measurement process. This article has three aims: (i) identify the response variable operationalization components in TDD experiments that study external quality; (ii) study their influence on the experimental results; (iii) determine if the experiment reports describe the measurement process components that have an impact on the results. We used two-part sequential mixed methods research. The first part of the research adopts a quantitative approach applying a statistical analysis of the impact of the operationalization components on the experimental results. The second part follows on with a qualitative approach applying a systematic mapping study (SMS). The test suites, intervention types and measurers have an influence on the measurements and results of the statistical analysis of TDD experiments in SE. The test suites have a major impact on both the measurements and the results of the experiments. The intervention type has less impact on the results than on the measurements. While the measurers have an impact on the measurements, this is not transferred to the experimental results. On the other hand, the results of our SMS confirm that TDD experiments do not usually report either the test suites, the test case generation method, or the details of how external quality was measured. A measurement protocol should be used to assure that the measurements made by different measurers are similar. It is necessary to report the test cases, the experimental task and the intervention type in order to be able to reproduce the measurements and statistical analyses, as well as to replicate experiments and build dependable families of experiments.},
	urldate = {2025-01-13},
	journal = {ACM Trans. Softw. Eng. Methodol.},
	author = {Uyaguari, Fernando and Acuña, Silvia T. and Castro, John W. and Fucci, Davide and Dieste, Oscar and Vegas, Sira},
	month = aug,
	year = {2024},
	note = {Just Accepted},
	file = {Full Text PDF:C\:\\Users\\debrouwe\\Zotero\\storage\\B8Z4YGSI\\Uyaguari et al. - 2024 - Relevant information in TDD experiment reporting.pdf:application/pdf},
}

@book{eder_veriact_2022,
	title = {{VeriACT}: {Implementing} a software using {DDD} and {TDD} / {Manfrad} {Eder}},
	shorttitle = {{VeriACT}},
	url = {http://netlibrary.aau.at/obvuklhs/8388521},
	abstract = {Hochschulschriften. VeriACT : Implementing a software using DDD and TDD / Manfrad Eder. Klagenfurt, 2022},
	language = {en},
	urldate = {2025-01-13},
	author = {Eder, Manfred},
	year = {2022},
	file = {Full Text PDF:C\:\\Users\\debrouwe\\Zotero\\storage\\ZYGP2VMK\\Eder - 2022 - VeriACT Implementing a software using DDD and TDD  Manfrad Eder.pdf:application/pdf},
}

@incollection{varga_tdd_2016,
	address = {Berkeley, CA},
	title = {{TDD} as an {API} {Design} {Technique}},
	isbn = {978-1-4842-2196-9},
	url = {https://doi.org/10.1007/978-1-4842-2196-9_4},
	abstract = {TDD is usually associated with the phrase “Write tests first, and then implement.” However, this is a rather distorted and reduced view of TDD.},
	language = {en},
	urldate = {2025-01-13},
	booktitle = {Creating {Maintainable} {APIs}: {A} {Practical}, {Case}-{Study} {Approach}},
	publisher = {Apress},
	author = {Varga, Ervin},
	editor = {Varga, Ervin},
	year = {2016},
	doi = {10.1007/978-1-4842-2196-9_4},
	keywords = {Client Application, Factory Method, Public Void, Step Definition, Unique String},
	pages = {69--95},
	file = {Full Text PDF:C\:\\Users\\debrouwe\\Zotero\\storage\\R7ND788W\\Varga - 2016 - TDD as an API Design Technique.pdf:application/pdf},
}

@book{varga_creating_2016,
	address = {Berkeley, CA},
	title = {Creating {Maintainable} {APIs}},
	copyright = {http://www.springer.com/tdm},
	isbn = {978-1-4842-2195-2 978-1-4842-2196-9},
	url = {http://link.springer.com/10.1007/978-1-4842-2196-9},
	language = {en},
	urldate = {2025-01-13},
	publisher = {Apress},
	author = {Varga, Ervin},
	year = {2016},
	doi = {10.1007/978-1-4842-2196-9},
	keywords = {APIs, IEEE, JSON, maintainable, object oriented, oo, programming, REST, software},
	file = {Full Text PDF:C\:\\Users\\debrouwe\\Zotero\\storage\\HYEQMLYU\\Varga - 2016 - Creating Maintainable APIs.pdf:application/pdf},
}

@article{vasudhar_sai_thokala_enhancing_2023,
	title = {Enhancing {Test}-{Driven} {Development} ({TDD}) and {BDD} {Methodologies} in {Full}-{Stack} {Web} {Applications}},
	volume = {10},
	issn = {25828185},
	url = {https://ijsra.net/node/6936},
	doi = {10.30574/ijsra.2023.10.1.0815},
	abstract = {The integration of Test-Driven Development (TDD) and Behavior-Driven Development (BDD) in full-stack application development, highlighting their complementary benefits. TDD emphasises writing automated tests before code implementation, fostering modular design, early defect detection, and efficient regression testing through iterative cycles. BDD extends TDD principles by involving stakeholders in defining behaviour scenarios using structured natural language, ensuring alignment with business objectives and user needs. The study explores modern tools like Jest, Cypress, and PHPUnit for TDD and BDD in frontend and backend development. It also discusses strategies for automating test data management, enhancing team collaboration, and integrating Continuous Integration and Continuous Delivery (CI/CD) pipelines to streamline deployment processes. TDD and BDD, when used together, promote high-quality software development by bridging the gap between technical teams and business stakeholders. TDD ensures robust code quality, while BDD enhances communication and user-centric design. This combination enables rapid iterations, traceability to business goals, and software solutions that are reliable, maintainable, and aligned with stakeholder expectations.},
	language = {en},
	number = {1},
	urldate = {2025-01-13},
	journal = {International Journal of Science and Research Archive},
	author = {{Vasudhar Sai Thokala}},
	month = oct,
	year = {2023},
	pages = {1119--1129},
	file = {PDF:C\:\\Users\\debrouwe\\Zotero\\storage\\DHUUXENK\\Vasudhar Sai Thokala - 2023 - Enhancing Test-Driven Development (TDD) and BDD Methodologies in Full-Stack Web Applications.pdf:application/pdf},
}

@article{becker_besouro_2015,
	title = {Besouro: {A} framework for exploring compliance rules in automatic {TDD} behavior assessment},
	volume = {57},
	issn = {09505849},
	shorttitle = {Besouro},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0950584914001426},
	doi = {10.1016/j.infsof.2014.06.003},
	abstract = {Objective: This paper describes Besouro, a framework targeted at the development of systems for automatic TDD behavior assessment. The main rationale of Besouro’s design is the ability to compare distinct operational deﬁnitions, evaluate them with regard to users’ perception, and explore code information for further analysis and conformance assessment improvement.
Method: We developed an architecture with clear separation of concerns, which enables to vary: (a) the atomic events and respective metrics to be collected from developing and testing environments; (b) the organization of atomic events in streams of actions or processes; and (c) the classiﬁcation and assessment components for each set of operational deﬁnitions adopted. The architecture also includes a mechanism for on-line user assessment awareness and feedback, and integrates event-related information with the respective code in a code version system.
Results: We illustrate the usefulness of Besouro’s features for understanding the actions and processes underlying TDD through a prototype developed to support an experiment based on user feedback. We show how it was possible to compare variations of a same operational deﬁnition by exploring users’ feedback, and use source code to improve the automatic classiﬁcation of TDD practices.
Conclusion: Understanding the actions and processes underlying successful TDD application is key for leveraging TDD beneﬁts. In the absence of a rigorous deﬁnition for TDD, the proposed approach aims at building consensus from experimentation and empirical validation.},
	language = {en},
	urldate = {2025-01-13},
	journal = {Information and Software Technology},
	author = {Becker, Karin and Pedroso, Bruno De Souza Costa and Pimenta, Marcelo Soares and Jacobi, Ricardo Pezzuol},
	month = jan,
	year = {2015},
	pages = {494--508},
	file = {PDF:C\:\\Users\\debrouwe\\Zotero\\storage\\J8QY2PBF\\Becker et al. - 2015 - Besouro A framework for exploring compliance rules in automatic TDD behavior assessment.pdf:application/pdf},
}

@inproceedings{leung_study_1990,
	address = {San Diego, CA, USA},
	title = {A study of integration testing and software regression at the integration level},
	isbn = {978-0-8186-2091-1},
	url = {http://ieeexplore.ieee.org/document/131377/},
	doi = {10.1109/ICSM.1990.131377},
	abstract = {Integration testing is an important phase of the testing process which has not been thoroughly studied. Although integration strategies are well-understood, the test selection problem has not been systematically studied by the testing research community. In this paper, we identify the common errors and faults in combining modules into a working unit. We also make practical recommendations on test selection for integration testing, and utilize those recommendations for regression testing at the integration level. With emphasis on reusing the previous test cases and retesting only the parts that are modified, one can reduce the testing expenses. The concept of "firewall" is proposed to assist the tester in focusing on that part of the system where new errors may have been introduced by a correction or a design change. An experiment is presented in which an application of our strategy is compared to the 'retest-all' strategy. Applying our approach for test selection we were able to discover all errors found by the retest-all strategy by executing only 35\% of the total number of test cases.},
	language = {en},
	urldate = {2025-01-14},
	booktitle = {Proceedings. {Conference} on {Software} {Maintenance} 1990},
	publisher = {IEEE Comput. Soc. Press},
	author = {Leung, H.K.N. and White, L.},
	year = {1990},
	pages = {290--301},
	annote = {This is too old.

},
	file = {PDF:C\:\\Users\\debrouwe\\Zotero\\storage\\C8RD2SGY\\Leung and White - 1990 - A study of integration testing and software regression at the integration level.pdf:application/pdf},
}

@inproceedings{brar_differentiating_2015,
	title = {Differentiating {Integration} {Testing} and unit testing},
	url = {https://ieeexplore.ieee.org/abstract/document/7100358},
	abstract = {Software testing plays a vital role in the affirmation of the software quality and reliability. It is a never ending process which starts with the very initial stage of software development and continues with Software Development Life Cycle. Testing may be in any form depending on the type of software under consideration. This paper furnishes the basics of Software Testing and steps involved in the testing procedure. We will review two significant approaches for testing software which are Unit testing and Integration Testing. We will study the brief overview of the both the approaches and also compare them on the basis of various parameters like modules, problem discovery and techniques involved.},
	urldate = {2025-01-14},
	booktitle = {2015 2nd {International} {Conference} on {Computing} for {Sustainable} {Global} {Development} ({INDIACom})},
	author = {Brar, Hanmeet Kaur and Kaur, Puneet Jai},
	month = mar,
	year = {2015},
	keywords = {Software testing, Computer science, Electronic mail, integration testing, software development life cycle, software quality, Software quality, Software reliability, software testing, unit testing},
	pages = {796--798},
	file = {Full Text PDF:C\:\\Users\\debrouwe\\Zotero\\storage\\97QFKAC4\\Brar and Kaur - 2015 - Differentiating Integration Testing and unit testing.pdf:application/pdf},
}

@article{jorgensen_object-oriented_nodate,
	title = {Object-oriented integration testing},
	language = {en},
	author = {Jorgensen, Paul C and Erickson, Carl},
	annote = {This is too old.

},
	file = {PDF:C\:\\Users\\debrouwe\\Zotero\\storage\\LARYIHK9\\Jorgensen and Erickson - Object-oriented integration testing.pdf:application/pdf},
}

@inproceedings{holcombe_functional_2001,
	title = {Functional {Test} {Generation} for {Extreme} {Programming}},
	url = {https://www.semanticscholar.org/paper/Functional-Test-Generation-for-Extreme-Programming-Holcombe-Bogdanov/e07dfda4634ef4deece1658a589c6d7990c581cc},
	abstract = {Test generation and the engineering, including maintenance, of the set of test cases are a key part of the Extreme Programming approach. Since so much depends on the viability of these test sets it is therefore important that methods for constructing them make use of the best available techniques. Total testing provides a mechanism whereby test sets are created which can detect ALL possible faults in an implementation, provided that a number of key conditions are satisfied. This paper describes how total testing can be used in Extreme Programming and illustrates the concepts with a simple case study. The methods proposed here are being used in a number of industrial projects and some interim conclusions from these are presented.},
	urldate = {2025-01-14},
	author = {Holcombe, M. and Bogdanov, K. and Gheorghe, M.},
	year = {2001},
	annote = {[TLDR] This paper describes how total testing can be used in Extreme Programming and illustrates the concepts with a simple case study and some interim conclusions from these are presented.},
	file = {PDF:C\:\\Users\\debrouwe\\Zotero\\storage\\BGCWN3AS\\Holcombe et al. - Functional Test Generation for Extreme Programming.pdf:application/pdf},
}

@article{erdogmus_effectiveness_2005,
	title = {On the effectiveness of the test-first approach to programming},
	volume = {31},
	issn = {1939-3520},
	url = {https://ieeexplore.ieee.org/abstract/document/1423994},
	doi = {10.1109/TSE.2005.37},
	abstract = {Test-driven development (TDD) is based on formalizing a piece of functionality as a test, implementing the functionality such that the test passes, and iterating the process. This paper describes a controlled experiment for evaluating an important aspect of TDD: in TDD, programmers write functional tests before the corresponding implementation code. The experiment was conducted with undergraduate students. While the experiment group applied a test-first strategy, the control group applied a more conventional development technique, writing tests after the implementation. Both groups followed an incremental process, adding new features one at a time and regression testing them. We found that test-first students on average wrote more tests and, in turn, students who wrote more tests tended to be more productive. We also observed that the minimum quality increased linearly with the number of programmer tests, independent of the development strategy employed.},
	number = {3},
	urldate = {2025-01-14},
	journal = {IEEE Transactions on Software Engineering},
	author = {Erdogmus, H. and Morisio, M. and Torchiano, M.},
	month = mar,
	year = {2005},
	note = {Conference Name: IEEE Transactions on Software Engineering},
	keywords = {Software testing, Software quality, coding tools and techniques, Computer Society, Debugging, Feedback, Functional programming, Index Terms- General programming techniques, productivity, Productivity, programming paradigms., Programming profession, Quality assurance, software engineering process, Software Quality/SQA, testing and debugging, testing strategies, Writing},
	pages = {226--237},
	file = {Full Text:C\:\\Users\\debrouwe\\Zotero\\storage\\AMKINYFZ\\Erdogmus et al. - 2005 - On the effectiveness of the test-first approach to programming.pdf:application/pdf;IEEE Xplore Abstract Record:C\:\\Users\\debrouwe\\Zotero\\storage\\4T9ZH7MH\\1423994.html:text/html},
}

@article{alsaqqa_agile_2020,
	title = {Agile {Software} {Development}: {Methodologies} and {Trends}},
	volume = {14},
	copyright = {Copyright (c) 2020 SAMAR ALSAQQA, Samer Sawalha, Heba Abdel-Nabi},
	issn = {1865-7923},
	shorttitle = {Agile {Software} {Development}},
	url = {https://online-journals.org/index.php/i-jim/article/view/13269},
	doi = {10.3991/ijim.v14i11.13269},
	abstract = {Software engineering is a discipline that undergone many improvements that aims to keep up with the new advancements in technologies and the modern business requirements through developing effective approaches to reach the final software product, agile software development is one of these successful approaches. Agile software development is a lightweight approach that was proposed to overcome the convolutional development methods’ limitations and to reduce the overhead and the cost while providing flexibility to adopt the changes in requirements at any stage, this is done by managing the tasks and their coordination through a certain set of values and principles.In this work, a comprehensive review that outlines the main agile values and principles, and states the key differences that distinguish agile methods over the traditional ones are presented. Then a discussion of the most popular agile methodologies; their life cycles, their roles, and their advantages and disadvantages are outlined. The recent state of art trends that adopts agile development especially in cloud computing, big data, and coordination are also explored. And finally, this work highlights how to choose the best suitable agile methodology that must be selected according to the task at hand, how sensitive the product is and the organization structure.},
	language = {en},
	number = {11},
	urldate = {2025-01-23},
	journal = {International Journal of Interactive Mobile Technologies (iJIM)},
	author = {Alsaqqa, Samar and Sawalha, Samer and Abdel-Nabi, Heba},
	month = jul,
	year = {2020},
	note = {Number: 11},
	keywords = {Agile Development, Agile Methods, Big Data, Cloud Computing., Coordination},
	pages = {246--270},
	file = {Full Text PDF:C\:\\Users\\debrouwe\\Zotero\\storage\\7P97KFFR\\Alsaqqa et al. - 2020 - Agile Software Development Methodologies and Trends.pdf:application/pdf},
}

@misc{abrahamsson_agile_2017,
	title = {Agile {Software} {Development} {Methods}: {Review} and {Analysis}},
	shorttitle = {Agile {Software} {Development} {Methods}},
	url = {http://arxiv.org/abs/1709.08439},
	doi = {10.48550/arXiv.1709.08439},
	abstract = {Agile - denoting "the quality of being agile, readiness for motion, nimbleness, activity, dexterity in motion" - software development methods are attempting to offer an answer to the eager business community asking for lighter weight along with faster and nimbler software development processes. This is especially the case with the rapidly growing and volatile Internet software industry as well as for the emerging mobile application environment. The new agile methods have evoked substantial amount of literature and debates. However, academic research on the subject is still scarce, as most of existing publications are written by practitioners or consultants. The aim of this publication is to begin filling this gap by systematically reviewing the existing literature on agile software development methodologies. This publication has three purposes. First, it proposes a definition and a classification of agile software development approaches. Second, it analyses ten software development methods that can be characterized as being "agile" against the defined criterion. Third, it compares these methods and highlights their similarities and differences. Based on this analysis, future research needs are identified and discussed.},
	urldate = {2025-01-23},
	publisher = {arXiv},
	author = {Abrahamsson, Pekka and Salo, Outi and Ronkainen, Jussi and Warsta, Juhani},
	month = sep,
	year = {2017},
	note = {arXiv:1709.08439 [cs]},
	keywords = {Computer Science - Software Engineering},
	annote = {Comment: Seminal work on agile software development methods from 2002. This is the author's version of the publication. Copyright holders version can be downloaded at http://www.vtt.fi/inf/pdf/publications/2002/P478.pdf},
	file = {Preprint PDF:C\:\\Users\\debrouwe\\Zotero\\storage\\KTTWTY2Z\\Abrahamsson et al. - 2017 - Agile Software Development Methods Review and Analysis.pdf:application/pdf;Snapshot:C\:\\Users\\debrouwe\\Zotero\\storage\\QCNH68ZJ\\1709.html:text/html},
}

@incollection{schmidt_agile_2016,
	address = {Cham},
	title = {Agile {Software} {Development}},
	isbn = {978-3-319-26057-0},
	url = {https://doi.org/10.1007/978-3-319-26057-0_2},
	abstract = {Software is nowadays omnipresent in many consumer and business products. From cars to complex business software over simple smart phone apps, many people regularly use software-based products or services at home or at work. With more than two billion people using broadband internet today, new markets emerge for software companies challenging established market incumbents with software-based services and products. Software brings life to various types of computer systems which have steadily become cheaper, more powerful, more compact, and more energy efficient over the last decades.},
	language = {en},
	urldate = {2025-01-23},
	booktitle = {Agile {Software} {Development} {Teams}},
	publisher = {Springer International Publishing},
	author = {Schmidt, Christoph},
	editor = {Schmidt, Christoph},
	year = {2016},
	doi = {10.1007/978-3-319-26057-0_2},
	keywords = {Agile Methods, Agile Software Development, Failed Software Development Projects, Small Software Development Teams, Software-based Services},
	pages = {7--35},
	file = {Full Text PDF:C\:\\Users\\debrouwe\\Zotero\\storage\\QVAX6DAU\\Schmidt - 2016 - Agile Software Development.pdf:application/pdf},
}

@article{ehsan_restful_2022,
	title = {{RESTful} {API} {Testing} {Methodologies}: {Rationale}, {Challenges}, and {Solution} {Directions}},
	volume = {12},
	copyright = {http://creativecommons.org/licenses/by/3.0/},
	issn = {2076-3417},
	shorttitle = {{RESTful} {API} {Testing} {Methodologies}},
	url = {https://www.mdpi.com/2076-3417/12/9/4369},
	doi = {10.3390/app12094369},
	abstract = {Service-oriented architecture has evolved to be the backbone for large-scale integration between different applications and platforms. This concept has led to today’s reality of cloud services. Many of the major business platforms are providing their services to end-users and other companies as well. Companies are crafting ways to allow other businesses fast service integration and to get on board quickly in the market. REST (representational state transfer) has emerged as the standard protocol for implementing and consuming these services, which are called RESTful application programming interfaces (APIs). As the internal details of the RESTful APIs are not completely available during consumption, thorough testing has been a major challenge. Any unprecedented change in the APIs can cause the major failure of service operations, which can cause an organization to face both financial and trust losses. Research efforts have been made to alleviate testing challenges by introducing different frameworks and auto-generating unit test approaches. However, there is still a lack of an overview of the state-of-the-art in RESTful API testing. As such, the objective of this article is to identify, analyze, and synthesize the studies that have been performed related to RESTful APIs’ testing methodologies and unit test generation. With this perspective, a systematic literature review (SLR) study was conducted. In total, 16 papers were retrieved and included based on study selection criteria for in-depth analysis. This SLR discusses and categorizes different problems and solutions related to RESTful APIs’ testing and unit test generation.},
	language = {en},
	number = {9},
	urldate = {2025-01-23},
	journal = {Applied Sciences},
	author = {Ehsan, Adeel and Abuhaliqa, Mohammed Ahmad M. E. and Catal, Cagatay and Mishra, Deepti},
	month = jan,
	year = {2022},
	note = {Number: 9
Publisher: Multidisciplinary Digital Publishing Institute},
	keywords = {auto-test case generation, cloud services, JSON base services, micro services, RESTful APIs, testing frameworks},
	pages = {4369},
	file = {Full Text PDF:C\:\\Users\\debrouwe\\Zotero\\storage\\AFN9INMK\\Ehsan et al. - 2022 - RESTful API Testing Methodologies Rationale, Challenges, and Solution Directions.pdf:application/pdf},
}

@article{gowda_best_2024,
	title = {Best {Practices} in {REST} {API} {Design} for {Enhanced} {Scalability} and {Security}},
	volume = {2},
	issn = {25839888},
	url = {https://urfjournals.org/open-access/best-practices-in-rest-api-design-for-enhanced-scalability-and-security.pdf},
	doi = {10.51219/JAIMLD/priyanka-gowda/202},
	abstract = {This paper aims to provide the reader with a discussion of proper and practical approaches to building and con-suming RESTful APIs which are core to contemporary web applications. It covers the basic elements like re-source naming conventions, which HTTP method is suitable for what type of request, statelessness, versioning, security, and performance. Using the current literature review and analysis of actual cases, the paper delivers constructive recommendations that are focused on the improvement of the scalability, maintainability, and security of RESTful APIs. By demonstrating the steps and examples in this paper, this study also shows how the implementation of these best practices can help improve the models’ integration, enhance code reuse, and manage possible risks. Through the adoption of the recommendations discussed above, developers will be in a good position to design and develop APIs that align with the nature and environment of target platforms.},
	language = {en},
	number = {1},
	urldate = {2025-01-23},
	journal = {Journal of Artificial Intelligence, Machine Learning and Data Science},
	author = {Gowda, Priyanka and Gowda, Ashwath Narayana},
	month = feb,
	year = {2024},
	pages = {827--830},
	file = {PDF:C\:\\Users\\debrouwe\\Zotero\\storage\\SQUS4JWE\\Gowda and Gowda - 2024 - Best Practices in REST API Design for Enhanced Scalability and Security.pdf:application/pdf},
}

@article{noauthor_manifesto_nodate,
	title = {Manifesto for {Agile} {Software} {Development}},
	language = {en},
	file = {PDF:C\:\\Users\\debrouwe\\Zotero\\storage\\WX7BVTIJ\\Manifesto for Agile Software Development.pdf:application/pdf},
}

@book{aggarwal_software_2005,
	title = {Software {Engineering}},
	isbn = {978-81-224-1638-1},
	abstract = {This Book Is Designed As A Textbook For The First Course In Software Engineering For Undergraduate And Postgraduate Students. This May Also Be Helpful For Software Professionals To Help Them Practice The Software Engineering Concepts.The Second Edition Is An Attempt To Bridge The Gap Between What Is Taught In The Classroom And What Is Practiced In The Industry . The Concepts Are Discussed With The Help Of Real Life Examples And Numerical Problems.This Book Explains The Basic Principles Of Software Engineering In A Clear And Systematic Manner. A Contemporary Approach Is Adopted Throughout The Book. After Introducing The Fundamental Concepts, The Book Presents A Detailed Discussion Of Software Requirements Analysis \& Specifications. Various Norms And Models Of Software Project Planning Are Discussed Next, Followed By A Comprehensive Account Of Software Metrics.Suitable Examples, Illustrations, Exercises, Multiple Choice Questions And Answers Are Included Throughout The Book To Facilitate An Easier Understanding Of The Subject.},
	language = {en},
	publisher = {New Age International},
	author = {Aggarwal, K. K.},
	year = {2005},
	note = {Google-Books-ID: dx2C9Zkez5YC},
	annote = {Find book in library or simiar book (this is only the google docs preview)
},
}

@article{mccauley_agile_2001,
	title = {Agile development methods poised to upset status quo},
	volume = {33},
	issn = {0097-8418},
	url = {https://dl.acm.org/doi/10.1145/572139.572150},
	doi = {10.1145/572139.572150},
	number = {4},
	urldate = {2025-01-26},
	journal = {SIGCSE Bull.},
	author = {McCauley, Renée},
	month = dec,
	year = {2001},
	pages = {14--15},
	file = {Full Text PDF:C\:\\Users\\debrouwe\\Zotero\\storage\\A7WU7WYT\\McCauley - 2001 - Agile development methods poised to upset status quo.pdf:application/pdf},
}

@article{noauthor_defining_nodate,
	title = {Defining and measuring project success},
	file = {PDF:C\:\\Users\\debrouwe\\Zotero\\storage\\NKWHI8ER\\Defining and measuring project success.pdf:application/pdf},
}

@article{lopez_authentication_2004,
	title = {Authentication and authorization infrastructures ({AAIs}): a comparative survey},
	volume = {23},
	copyright = {https://www.elsevier.com/tdm/userlicense/1.0/},
	issn = {01674048},
	shorttitle = {Authentication and authorization infrastructures ({AAIs})},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0167404804001828},
	doi = {10.1016/j.cose.2004.06.013},
	abstract = {In this article, we argue that traditional approaches for authorization and access control in computer systems (i.e., discretionary, mandatory, and rolebased access controls) are not appropriate to address the requirements of networked or distributed systems, and that proper authorization and access control requires infrastructural support in one way or another. This support can be provided, for example, by an authentication and authorization infrastructure (AAI). Against this background, we overview, analyze, discuss, and put into perspective some technologies that can be used to build and operate AAIs. More speciﬁcally, we address Microsoft .NET Passport and some related activities (e.g. the Liberty Alliance Project), Kerberos-based solutions, and AAIs that are based on digital certiﬁcates and public key infrastructures (PKIs). We conclude with the observation that there is no single best approach for providing an AAI, that every approach has speciﬁc advantages and disadvantages, and that a comprehensive AAI must combine various technologies and approaches.},
	language = {en},
	number = {7},
	urldate = {2025-02-01},
	journal = {Computers \& Security},
	author = {Lopez, Javier and Oppliger, Rolf and Pernul, Günther},
	month = oct,
	year = {2004},
	pages = {578--590},
	file = {PDF:C\:\\Users\\debrouwe\\Zotero\\storage\\E6L8RG6P\\Lopez et al. - 2004 - Authentication and authorization infrastructures (AAIs) a comparative survey.pdf:application/pdf},
}

@incollection{kizza_access_2024,
	address = {Cham},
	title = {Access {Control} and {Authorization}},
	isbn = {978-3-031-47549-8},
	url = {https://doi.org/10.1007/978-3-031-47549-8_9},
	abstract = {Access control is a process to determine “Who does what to what,” based on a policy. One of the system administrator's biggest problems, which can turn into a nightmare if it is not well handled, is controlling access of who gets in and out of the system and who uses what resources, when, and in what amounts. Access control is restricting this access to a system or system resources based on something other than the identity of the user. Access control, consisting of four elements: subjects, objects, operations, and a reference monitor, is one of the major cornerstones of system security. It is essential to determine how access control protection can be provided to each of the system resources. To do this, you need good access control and access protection policies. Authorization, commonly known as access permissions, is a set of access rights and access privileges granted to a user to benefit from a particular system resource. It is a determination of whether a user has permission to access, read, modify, insert, or delete certain data, or to execute certain programs. This chapter focuses on a detailed examination and discussion of these two processes that ensure systems safety.},
	booktitle = {Guide to {Computer} {Network} {Security}},
	publisher = {Springer International Publishing},
	author = {Kizza, Joseph Migga},
	year = {2024},
	doi = {10.1007/978-3-031-47549-8_9},
	pages = {195--214},
	annote = {Note that the citation is just for the Access Control and Authorization Chapter (p 195-214)
},
	file = {PDF:C\:\\Users\\debrouwe\\Zotero\\storage\\6DLXP6GD\\Kizza - 2024 - Guide to Computer Network Security.pdf:application/pdf},
}

@article{huang_empirical_2009,
	title = {Empirical investigation towards the effectiveness of {Test} {First} programming},
	volume = {51},
	copyright = {https://www.elsevier.com/tdm/userlicense/1.0/},
	issn = {09505849},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0950584908000517},
	doi = {10.1016/j.infsof.2008.03.007},
	abstract = {The Test First (TF) programming, which is based on an iterative process of ‘‘setting up test cases, implementing the functionality, and having all test cases passed”, has been put forward for decades, however knowledge of the evidence of the Test First programming’s success is limited. This paper describes a controlled experiment that investigated the distinctions between the effectiveness of Test First and that of Test Last (TL) (the traditional approach). The experimental results showed that Test First teams spent a larger percentage of time on testing. The achievable minimum external quality of delivered software applications increased with the percentage of time spent on testing regardless of the testing strategy (TF or TL) applied, although there does not exist a linear correlation between them. With four years’ data, it is also found that a strong linear correlation between the amount of effort spent on testing and coding in Test First teams, while this phenomenon was not observed in Test Last teams.},
	language = {en},
	number = {1},
	urldate = {2025-02-02},
	journal = {Information and Software Technology},
	author = {Huang, Liang and Holcombe, Mike},
	month = jan,
	year = {2009},
	pages = {182--194},
	file = {PDF:C\:\\Users\\debrouwe\\Zotero\\storage\\7T44QG77\\Huang and Holcombe - 2009 - Empirical investigation towards the effectiveness of Test First programming.pdf:application/pdf},
}

@article{neumann_analysis_2021,
	title = {An {Analysis} of {Public} {REST} {Web} {Service} {APIs}},
	volume = {14},
	issn = {1939-1374},
	url = {https://ieeexplore.ieee.org/document/8385157},
	doi = {10.1109/TSC.2018.2847344},
	abstract = {Businesses are increasingly deploying their services on the web, in the form of web applications, SOAP services, message-based services, and, more recently, REST services. Although the movement towards REST is widely recognized, there is not much concrete information regarding the technical features being used in the field, such as typical data formats, how HTTP verbs are being used, or typical URI structures, just to name a few. In this paper, we go through the Alexa.com top 4000 most popular sites to identify precisely 500 websites claiming to provide a REST web service API. We analyze these 500 APIs for key technical features, degree of compliance with REST architectural principles (e.g., resource addressability), and for adherence to best practices (e.g., API versioning). We observed several trends (e.g., widespread JSON support, software-generated documentation), but, at the same time, high diversity in services, including differences in adherence to best practices, with only 0.8 percent of services strictly complying with all REST principles. Our results can help practitioners evolve guidelines and standards for designing higher quality services and also understand deficiencies in currently deployed services. Researchers may also benefit from the identification of key research areas, contributing to the deployment of more reliable services.},
	number = {4},
	urldate = {2025-02-04},
	journal = {IEEE Transactions on Services Computing},
	author = {Neumann, Andy and Laranjeiro, Nuno and Bernardino, Jorge},
	month = jul,
	year = {2021},
	note = {Conference Name: IEEE Transactions on Services Computing},
	keywords = {Standards, Analytical models, REST, API, Best practices, Documentation, HTTP, RESTful, Simple object access protocol, web, web services, web services analysis, XML},
	pages = {957--970},
	file = {Full Text PDF:C\:\\Users\\debrouwe\\Zotero\\storage\\3392SCBQ\\Neumann et al. - 2021 - An Analysis of Public REST Web Service APIs.pdf:application/pdf;IEEE Xplore Abstract Record:C\:\\Users\\debrouwe\\Zotero\\storage\\LI4RWCCI\\8385157.html:text/html},
}

@inproceedings{pautasso_restful_2008,
	address = {New York, NY, USA},
	series = {{WWW} '08},
	title = {Restful web services vs. "big"' web services: making the right architectural decision},
	isbn = {978-1-60558-085-2},
	shorttitle = {Restful web services vs. "big"' web services},
	url = {https://dl.acm.org/doi/10.1145/1367497.1367606},
	doi = {10.1145/1367497.1367606},
	abstract = {Recent technology trends in the Web Services (WS) domain indicate that a solution eliminating the presumed complexity of the WS-* standards may be in sight: advocates of REpresentational State Transfer (REST) have come to believe that their ideas explaining why the World Wide Web works are just as applicable to solve enterprise application integration problems and to simplify the plumbing required to build service-oriented architectures. In this paper we objectify the WS-* vs. REST debate by giving a quantitative technical comparison based on architectural principles and decisions. We show that the two approaches differ in the number of architectural decisions that must be made and in the number of available alternatives. This discrepancy between freedom-from-choice and freedom-of-choice explains the complexity difference perceived. However, we also show that there are significant differences in the consequences of certain decisions in terms of resulting development and maintenance costs. Our comparison helps technical decision makers to assess the two integration styles and technologies more objectively and select the one that best fits their needs: REST is well suited for basic, ad hoc integration scenarios, WS-* is more flexible and addresses advanced quality of service requirements commonly occurring in enterprise computing.},
	urldate = {2025-02-04},
	booktitle = {Proceedings of the 17th international conference on {World} {Wide} {Web}},
	publisher = {Association for Computing Machinery},
	author = {Pautasso, Cesare and Zimmermann, Olaf and Leymann, Frank},
	month = apr,
	year = {2008},
	pages = {805--814},
	file = {Full Text PDF:C\:\\Users\\debrouwe\\Zotero\\storage\\276LND4F\\Pautasso et al. - 2008 - Restful web services vs. big' web services making the right architectural decision.pdf:application/pdf},
}

@article{nidhra_black_2012,
	title = {Black {Box} and {White} {Box} {Testing} {Techniques} - {A} {Literature} {Review}},
	volume = {2},
	issn = {18395171},
	url = {http://www.airccse.org/journal/ijesa/papers/2212ijesa04.pdf},
	doi = {10.5121/ijesa.2012.2204},
	abstract = {There are several methods for automatic test case generation has been proposed in the past. But most of these techniques are structural testing techniques that require the understanding of the internal working of the program. There is less practical coverage of all testing techniques together. In this paper we conducted a literature study on all testing techniques together that are related to both Black and White box testing techniques, moreover we assume a case situation of Insurance premium calculation for driver and we derive the test cases and test data for white box testing methods such as Branch testing, Statement testing, Condition Coverage testing, multiple condition coverage testing, in the similar way we derive the test cases and test data for the black box testing methods such as: Equivalence partitioning and Boundary value analysis.},
	language = {en},
	number = {2},
	urldate = {2025-02-09},
	journal = {International Journal of Embedded Systems and Applications},
	author = {Nidhra, Srinivas},
	month = jun,
	year = {2012},
	pages = {29--50},
	file = {PDF:C\:\\Users\\debrouwe\\Zotero\\storage\\Y9VUYFMF\\Nidhra - 2012 - Black Box and White Box Testing Techniques - A Literature Review.pdf:application/pdf},
}

@inproceedings{tsai_end--end_2001,
	address = {Chicago, IL, USA},
	title = {End-to-end integration testing design},
	isbn = {978-0-7695-1372-0},
	url = {http://ieeexplore.ieee.org/document/960613/},
	doi = {10.1109/CMPSAC.2001.960613},
	abstract = {Integration testing has always been a challenge especially i f the system under test is large with many subsystems and interfaces. This paper proposer an approach to design End-toEnd (E2E) ini'egration testing, including test scenario specijication, test case generation and tool support. T a t scenarios are specified as thin threads, each of which represents a single jiinction from izn end user's point of view. Thin threads can be organized hierarchically into a tree with each branch consisting of a set of related thin threads representing a set of related functionality. A test engineer can use thin-thread trees to generate test cases systematically, as well as carry oirt other related tasks such as risk analysis and assignment, regression testing, ripple effect analysis. A prototype tool has been developed to support E2E testing in a distributed environment on the JZEEplatfoi-m.},
	language = {en},
	urldate = {2025-02-09},
	booktitle = {25th {Annual} {International} {Computer} {Software} and {Applications} {Conference}. {COMPSAC} 2001},
	publisher = {IEEE},
	author = {Tsai, W.T. and {Xiaoying Bai} and Paul, R. and {Weiguang Shao} and Agarwal, V.},
	year = {2001},
	pages = {166--171},
	file = {PDF:C\:\\Users\\debrouwe\\Zotero\\storage\\PBGJRB6S\\Tsai et al. - 2001 - End-to-end integration testing design.pdf:application/pdf},
}

@article{leung_study_1997,
	title = {A study of user acceptance tests},
	volume = {6},
	issn = {09639314},
	url = {http://link.springer.com/10.1023/A:1018503800709},
	doi = {10.1023/A:1018503800709},
	abstract = {The user acceptance test (UAT) is the final stage of testing in application software development. When testing results meet the acceptance criteria, the software system can be released for operational use.This paper first compares the different testing phases of software development (i.e. unit test, integration test, system test and UAT) in terms of important testing elements so as to highlight the uniqueness of UAT relative to the other test phases. Then, we describe several approaches for acceptance test, including the behaviour-based approach, the black-box strategy and a new UAT strategy called operation-based testing. The new strategy uses the operational profile for testing purposes, includes a well-defined acceptance criteria, and satisfies the test requirements of ISO9001 standards.},
	number = {2},
	urldate = {2025-02-09},
	journal = {Software Quality Control},
	author = {Leung, Hareton K.N. and Wong, Peter W.L.},
	year = {1997},
	pages = {137--149},
	annote = {[TLDR] Several approaches for acceptance test are described, including the behaviour-based approach, the black-box strategy and a new UAT strategy called operation-based testing that satisfies the test requirements of ISO9001 standards.},
	file = {A_1018503800709:C\:\\Users\\debrouwe\\Zotero\\storage\\NJAUSHW7\\A_1018503800709.pdf:application/pdf},
}

@article{hsia_software_1997,
	title = {Software requirements and acceptance testing},
	volume = {3},
	issn = {1573-7489},
	url = {https://doi.org/10.1023/A:1018938021528},
	doi = {10.1023/A:1018938021528},
	abstract = {In this paper we 1) review industry acceptance testing practices and 2) present a systematic approach to scenario analysis and its application to acceptance testing with the aim to improve the current practice. It summarizes the existing practice into categories and identifies the serious weakness. Then, a new approach based on the formal scenario analysis is presented. It is systematic, and easily applicable to any software or system. A simple, yet realistic example is used to illustrate its effectiveness. Finally, its benefits and its applicability are summarized.},
	language = {en},
	number = {1},
	urldate = {2025-02-09},
	journal = {Annals of Software Engineering},
	author = {Hsia, Pei and Kung, David and Sell, Chris},
	month = jan,
	year = {1997},
	keywords = {Acceptance Testing, IEEE Computer Society, Scenario Analysis, Scenario Tree, Software Requirement},
	pages = {291--317},
	file = {Full Text PDF:C\:\\Users\\debrouwe\\Zotero\\storage\\F7Q6EFRR\\Hsia et al. - 1997 - Software requirements and acceptance testing.pdf:application/pdf},
}
